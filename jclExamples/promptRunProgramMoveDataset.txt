In IBM mainframe systems, JCL (Job Control Language) is used to submit batch jobs, but it doesn't directly interact with directories in the way modern scripting languages do. Instead, JCL works with datasets and programs (load modules) stored in partitioned datasets (PDS) or program libraries.

If you want to run a list of programs sequentially, you would typically define each program as a step in the JCL job. Here's an example of how you might write JCL to run a series of programs:

Example JCL to Run Multiple Programs
jcl
Copy
//MYJOB    JOB (ACCT),'RUN PROGRAMS',CLASS=A,MSGCLASS=X,NOTIFY=&SYSUID
//STEP1    EXEC PGM=PROG1
//STEPLIB  DD DSN=MY.LOADLIB,DISP=SHR
//SYSOUT   DD SYSOUT=*
//SYSIN    DD *
//         (Input data for PROG1, if needed)
/*
//STEP2    EXEC PGM=PROG2
//STEPLIB  DD DSN=MY.LOADLIB,DISP=SHR
//SYSOUT   DD SYSOUT=*
//SYSIN    DD *
//         (Input data for PROG2, if needed)
/*
//STEP3    EXEC PGM=PROG3
//STEPLIB  DD DSN=MY.LOADLIB,DISP=SHR
//SYSOUT   DD SYSOUT=*
//SYSIN    DD *
//         (Input data for PROG3, if needed)
/*
//STEP4    EXEC PGM=PROG4
//STEPLIB  DD DSN=MY.LOADLIB,DISP=SHR
//SYSOUT   DD SYSOUT=*
//SYSIN    DD *
//         (Input data for PROG4, if needed)
/*
Explanation:
JOB Statement:

//MYJOB JOB defines the job with accounting information, job name, and other parameters like MSGCLASS and NOTIFY.

EXEC Statement:

Each EXEC PGM= statement specifies a program to run. Replace PROG1, PROG2, etc., with the actual program names.

STEPLIB DD Statement:

STEPLIB points to the load library (PDS) where the programs are stored. Replace MY.LOADLIB with the actual dataset name.

SYSOUT DD Statement:

SYSOUT=* directs the program's output to the system output.

SYSIN DD Statement:

SYSIN is used to provide input data to the program if required. Replace the comments with actual input data or remove it if not needed.

Sequential Execution:

Each step (STEP1, STEP2, etc.) runs sequentially. If one step fails, the job may terminate unless you specify COND parameters to control job flow.

Notes:
If your programs are stored in different libraries, you can specify different STEPLIB datasets for each step.

If you need to dynamically determine which programs to run (e.g., based on a list in a dataset), you would typically use a higher-level scripting language like REXX or a program written in a language like COBOL or PL/I to generate the JCL dynamically.

Let me know if you need further clarification or help with a specific scenario! ðŸ˜Š

program to move a file in jcl
In JCL, you cannot directly "move" a file (dataset) like you would in a modern file system. Instead, you can achieve the equivalent of moving a file by copying the dataset to a new location and then deleting the original dataset. This is typically done using IDCAMS (Access Method Services) or IEBGENER utilities.

Below is an example of how to "move" a dataset using JCL:

Example JCL to Move a Dataset
jcl
Copy
//MYJOB    JOB (ACCT),'MOVE DATASET',CLASS=A,MSGCLASS=X,NOTIFY=&SYSUID
//STEP1    EXEC PGM=IDCAMS
//SYSPRINT DD SYSOUT=*
//SYSIN    DD *
   REPRO -
     INFILE(INPUT.DATASET) -
     OUTFILE(OUTPUT.DATASET)
   DELETE INPUT.DATASET
/*
//INPUT.DATASET DD DSN=OLD.DATASET.NAME,DISP=SHR
//OUTPUT.DATASET DD DSN=NEW.DATASET.NAME,DISP=(NEW,CATLG,DELETE),
//             SPACE=(TRK,(5,5)),UNIT=SYSDA,
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=8000)
Explanation:
JOB Statement:

Defines the job with accounting information and other parameters.

STEP1 (IDCAMS):

The IDCAMS utility is used to copy and delete datasets.

REPRO copies the contents of the input dataset (INPUT.DATASET) to the output dataset (OUTPUT.DATASET).

DELETE deletes the original dataset after the copy is complete.

SYSPRINT DD Statement:

Captures the output messages from the IDCAMS utility.

SYSIN DD Statement:

Contains the IDCAMS commands to perform the copy and delete operations.

INPUT.DATASET DD Statement:

Specifies the original dataset to be moved (OLD.DATASET.NAME).

OUTPUT.DATASET DD Statement:

Defines the new dataset (NEW.DATASET.NAME) where the data will be copied.

DISP=(NEW,CATLG,DELETE) ensures the dataset is created, cataloged, and deleted if the step fails.

SPACE, UNIT, and DCB parameters define the allocation details for the new dataset.

Alternative: Using IEBGENER
If you prefer to use IEBGENER for copying, here's an example:

jcl
Copy
//MYJOB    JOB (ACCT),'MOVE DATASET',CLASS=A,MSGCLASS=X,NOTIFY=&SYSUID
//STEP1    EXEC PGM=IEBGENER
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DUMMY
//SYSUT1   DD DSN=OLD.DATASET.NAME,DISP=SHR
//SYSUT2   DD DSN=NEW.DATASET.NAME,DISP=(NEW,CATLG,DELETE),
//             SPACE=(TRK,(5,5)),UNIT=SYSDA,
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=8000)
//STEP2    EXEC PGM=IDCAMS
//SYSPRINT DD SYSOUT=*
//SYSIN    DD *
   DELETE OLD.DATASET.NAME
/*
Key Points:
Copy and Delete: Moving a dataset in JCL involves copying the dataset to a new location and then deleting the original.

IDCAMS vs IEBGENER: IDCAMS is more versatile, while IEBGENER is simpler for basic copy operations.

Dataset Allocation: Ensure the new dataset is properly allocated with the correct attributes (e.g., SPACE, DCB).

Let me know if you need further clarification or help! ðŸ˜Š

